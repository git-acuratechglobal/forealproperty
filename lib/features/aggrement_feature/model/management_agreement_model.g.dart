// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'management_agreement_model.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

ManagementAgreementModel _$ManagementAgreementModelFromJson(
        Map<String, dynamic> json) =>
    ManagementAgreementModel(
      loggedusername: json['loggedusername'],
      id: (json['id'] as num?)?.toInt(),
      contactlistModel: (json['contactlistModel'] as List<dynamic>?)
          ?.map((e) => ContactListModel.fromJson(e as Map<String, dynamic>))
          .toList(),
      primarycontactModel: json['primarycontactModel'] == null
          ? null
          : PrimarycontactModel.fromJson(
              json['primarycontactModel'] as Map<String, dynamic>),
      documentReceipients: (json['documentReceipients'] as List<dynamic>?)
          ?.map((e) => DocumentReceipient.fromJson(e as Map<String, dynamic>))
          .toList(),
      agreementStatus: (json['agreementStatus'] as num?)?.toInt(),
      isOwnerSigned: json['isOwnerSigned'] as bool?,
      isAgentSigned: json['isAgentSigned'] as bool?,
      agencyId: (json['agencyId'] as num?)?.toInt(),
      signedDocumentId: json['signedDocumentId'],
      agreementDate: json['agreementDate'] == null
          ? null
          : DateTime.parse(json['agreementDate'] as String),
      agreementType: json['agreementType'],
      propertyId: (json['propertyId'] as num?)?.toInt(),
      agentId: (json['agentId'] as num?)?.toInt(),
      agentFirstName: json['agentFirstName'] as String?,
      agentLastName: json['agentLastName'] as String?,
      agentEmail: json['agentEmail'] as String?,
      agencyName: json['agencyName'] as String?,
      tradingName: json['tradingName'] as String?,
      agencyLicenceNumber: json['agencyLicenceNumber'] as String?,
      agencyAbn: json['agencyAbn'] as String?,
      agencyAcn: json['agencyAcn'] as String?,
      agencyAddress: json['agencyAddress'] as String?,
      agencyPostCode: json['agencyPostCode'] as String?,
      agencyState: json['agencyState'] as String?,
      agencyEmail: json['agencyEmail'] as String?,
      mobile: json['mobile'] as String?,
      phoneWork: json['phoneWork'],
      phoneHome: json['phoneHome'],
      fax: json['fax'],
      agencyWorkPhone: json['agencyWorkPhone'],
      companyName: json['companyName'] as String?,
      agencyLogo: json['agencyLogo'] as String?,
      propertyAddress: json['propertyAddress'] as String?,
      propertyPostCode: json['propertyPostCode'] as String?,
      propertyState: json['propertyState'] as String?,
      propertyUId: json['propertyUId'] as String?,
      contactPic: json['contactPic'],
      contactPic2: json['contactPic2'],
      contactGstRegistered: (json['contactGstRegistered'] as num?)?.toInt(),
      agencyGstRegistered: json['agencyGstRegistered'] as bool?,
      contactId1Verified: json['contactID1Verified'],
      contactId2Verified: json['contactID2Verified'],
      leaseCommencement: json['leaseCommencement'],
      leaseExpiry: json['leaseExpiry'],
      pAccountName: json['pAccountName'],
      pbsb: json['pbsb'],
      pAccountNo: json['pAccountNo'],
      principalName: json['principalName'] as String?,
      consumerGuide: json['consumerGuide'],
      agentFeePercentage: json['agentFeePercentage'],
      rent: (json['rent'] as num?)?.toInt(),
      bondAmount: (json['bondAmount'] as num?)?.toInt(),
      period: (json['period'] as num?)?.toInt(),
      primaryUserId: (json['primaryUserID'] as num?)?.toInt(),
      leasePremisesAtMarketRent: json['leasePremisesAtMarketRent'] as bool?,
      referToPrincipalForReLease: json['referToPrincipalForReLease'] as bool?,
      reviewRentBfrRLease: json['reviewRentBfrRLease'] as bool?,
      initialWeekRent: json['initialWeekRent'] as String?,
      percentageOfMonthRent: (json['percentageOfMonthRent'] as num?)?.toInt(),
      prprtyLeasdPrdDuringAgrmnt: json['prprtyLeasdPrdDuringAgrmnt'] as bool?,
      prprtyLeasdPrdWithinMonth: json['prprtyLeasdPrdWithinMonth'] as bool?,
      managementFee: (json['managementFee'] as num?)?.toInt(),
      managementFeeGst: (json['managementFeeGST'] as num?)?.toDouble(),
      marketingFee: (json['marketingFee'] as num?)?.toInt(),
      administrationFee: (json['administrationFee'] as num?)?.toInt(),
      applicationFeesForUtilites:
          (json['applicationFeesForUtilites'] as num?)?.toInt(),
      officeExpenses: (json['officeExpenses'] as num?)?.toInt(),
      redirect: json['redirect'] as bool?,
      strata: json['strata'] as bool?,
      stratacrn: json['stratacrn'],
      strataReference: json['strataReference'],
      water: json['water'] as bool?,
      waterCrn: json['waterCRN'],
      waterReference: json['waterReference'],
      councilRates: json['councilRates'] as bool?,
      councilRatesCrn: json['councilRatesCRN'],
      councilRatesReference: json['councilRatesReference'],
      insurance: json['insurance'] as bool?,
      insuranceCrn: json['insuranceCRN'],
      insuranceReference: json['insuranceReference'],
      insuranceStartDate: json['insuranceStartDate'],
      insuranceEndDate: json['insuranceEndDate'],
      isListedOnRea: json['isListedOnREA'] as bool?,
      isListedOnDomain: json['isListedOnDomain'] as bool?,
      socialMedia: json['socialMedia'] as bool?,
      signboard: json['signboard'] as bool?,
      thirdPartyName: json['thirdPartyName'] as String?,
      amountOfRebateDiscount: (json['amountOfRebateDiscount'] as num?)?.toInt(),
      obtainReferenceFromTenant: json['obtainReferenceFromTenant'] as bool?,
      enterIntoSignTenacyAgrmnt: json['enterIntoSignTenacyAgrmnt'] as bool?,
      undertakeInspection: json['undertakeInspection'] as bool?,
      effectRepairMaintainProprty: json['effectRepairMaintainProprty'] as bool?,
      payDisbursemnt: json['payDisbursemnt'] as bool?,
      collectReceiveRent: json['collectReceiveRent'] as bool?,
      serveNoticeForBreachTenancy: json['serveNoticeForBreachTenancy'] as bool?,
      undrtakeStpsToRecvrMony: json['undrtakeStpsToRecvrMony'] as bool?,
      representPrincipalCourt: json['representPrincipalCourt'] as bool?,
      payAccountsForAmount: json['payAccountsForAmount'] as bool?,
      advertisePropertyLetting: json['advertisePropertyLetting'] as bool?,
      reviewRentEndTenancy: json['reviewRentEndTenancy'] as bool?,
      tradesmanPayment: (json['tradesmanPayment'] as num?)?.toInt(),
      supplyUrgentRepairToTenant: json['supplyUrgentRepairToTenant'] as bool?,
      looseFillAsbestosInstallation: json['looseFillAsbestosInstallation'],
      swimmingPoolRegistered: json['swimmingPoolRegistered'],
      poolCertification: json['poolCertification'],
      smokeAlarm: json['smokeAlarm'],
      healthIssues: json['healthIssues'],
      flooding: json['flooding'],
      bushfire: json['bushfire'],
      seriousViolentCrime: json['seriousViolentCrime'],
      materialDescription: json['materialDescription'],
      parkingRestriction: json['parkingRestriction'],
      shareDriveway: json['shareDriveway'],
      affectdFlooding: json['affectdFlooding'],
      affectdBushfire: json['affectdBushfire'],
      affectdSeriousViolent: json['affectdSeriousViolent'],
      isContractForSalePremises: json['isContractForSalePremises'],
      isProposelToSell: json['isProposelToSell'],
      hasMortgageeCommenced: json['hasMortgageeCommenced'],
      isMortgageeTakgActnPossssion: json['isMortgageeTakgActnPossssion'],
      waterEfficiencyByNsw: json['waterEfficiencyByNSW'],
      affectByDescription: json['affectByDescription'],
      subjectToDescription: json['subjectToDescription'],
      corporateLicenseNumber: json['corporateLicenseNumber'] as String?,
      propertyFurnished: json['propertyFurnished'] as bool?,
      propertyUnfurnished: json['propertyUnfurnished'] as bool?,
      principalWarrantsSmokeAlarm: json['principalWarrantsSmokeAlarm'],
      ncatTribunalFee: json['ncatTribunalFee'] as String?,
      sherriffFee: json['sherriffFee'] as String?,
      otherStatutoryFee: json['otherStatutoryFee'] as String?,
      postageFee: json['postageFee'] as String?,
      agreementFilePath: json['agreementFilePath'],
      isManuallyAdded: json['isManuallyAdded'] as bool?,
      materialComments: json['materialComments'],
      activities: json['activities'] == null
          ? null
          : Activities.fromJson(json['activities'] as Map<String, dynamic>),
      getFullAddress: json['getFullAddress'] as String?,
    );

ContactListModel _$ContactListModelFromJson(Map<String, dynamic> json) =>
    ContactListModel(
      fName: json['fName'] as String?,
      lName: json['lName'] as String?,
      address: json['address'],
      mobileNumber: json['mobileNumber'] as String?,
      contactUniqueId: json['contactUniqueId'],
      landlineNumber: json['landlineNumber'],
      landlineNumber1: json['landlineNumber1'],
      companyName: json['companyName'],
      abn: json['abn'],
      acn: json['acn'],
      postcode: json['postcode'],
      regions: json['regions'],
      contactType: json['contactType'],
      isUserVerified: json['isUserVerified'] as bool?,
      isProofSubmited: json['isProofSubmited'] as bool?,
      getFullAddress: json['getFullAddress'] as String?,
      getFullName: json['getFullName'] as String?,
      ownerId: json['ownerId'],
      contactId: (json['contactId'] as num?)?.toInt(),
      contactUId: json['contactUId'],
      isPrimary: json['isPrimary'] as bool?,
      contactName: json['contactName'],
      contactEmail: json['contactEmail'] as String?,
      name: json['name'] as String?,
      firstName: json['firstName'],
      lastName: json['lastName'],
      phone: json['phone'] as String?,
      fromDate: json['fromDate'],
      toDate: json['toDate'],
      title: json['title'],
      isVerificationLinkSend: json['isVerificationLinkSend'] as bool?,
      typeIam: json['typeIAM'],
      verificationProofs: json['verificationProofs'],
    );

DocumentReceipient _$DocumentReceipientFromJson(Map<String, dynamic> json) =>
    DocumentReceipient(
      id: (json['id'] as num?)?.toInt(),
      documentType: (json['documentType'] as num?)?.toInt(),
      documentId: (json['documentId'] as num?)?.toInt(),
      contactId: (json['contactId'] as num?)?.toInt(),
      emailAddress: json['emailAddress'] as String?,
      agentId: (json['agentId'] as num?)?.toInt(),
      agencyId: (json['agencyId'] as num?)?.toInt(),
      isSent: json['isSent'] as bool?,
      sentDate: json['sentDate'] == null
          ? null
          : DateTime.parse(json['sentDate'] as String),
      signedDate: json['signedDate'],
      isSigned: json['isSigned'] as bool?,
      signMethod: json['signMethod'],
      signPicturePath: json['signPicturePath'],
      signValue: json['signValue'],
      name: json['name'] as String?,
      ipAddress: json['ipAddress'],
    );

PrimarycontactModel _$PrimarycontactModelFromJson(Map<String, dynamic> json) =>
    PrimarycontactModel(
      fName: json['fName'] as String?,
      lName: json['lName'] as String?,
      address: json['address'],
      mobileNumber: json['mobileNumber'] as String?,
      contactUniqueId: json['contactUniqueId'],
      landlineNumber: json['landlineNumber'],
      landlineNumber1: json['landlineNumber1'],
      companyName: json['companyName'],
      abn: json['abn'],
      acn: json['acn'],
      postcode: json['postcode'],
      regions: json['regions'],
      contactType: json['contactType'],
      isUserVerified: json['isUserVerified'] as bool?,
      isProofSubmited: json['isProofSubmited'] as bool?,
      getFullAddress: json['getFullAddress'] as String?,
      getFullName: json['getFullName'] as String?,
      ownerId: json['ownerId'],
      contactId: (json['contactId'] as num?)?.toInt(),
      contactUId: json['contactUId'],
      isPrimary: json['isPrimary'] as bool?,
      contactName: json['contactName'],
      contactEmail: json['contactEmail'] as String?,
      name: json['name'] as String?,
      firstName: json['firstName'],
      lastName: json['lastName'],
      phone: json['phone'] as String?,
      fromDate: json['fromDate'],
      toDate: json['toDate'],
      title: json['title'],
      isVerificationLinkSend: json['isVerificationLinkSend'] as bool?,
      typeIam: json['typeIAM'],
      verificationProofs: json['verificationProofs'],
    );
